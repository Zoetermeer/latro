comp_unit ::= exps

terminated_exp ::= exp ";"
exps ::=
  | terminated_exp
  | exps terminated_exp
  | EPSILON

exp ::=
  | "(" exp ")"
  | exp "+" exp
  | exp "-" exp
  | "!" exp
  | exp "(" arg_exps ")"
  | "import" qualified_id
  | id ":=" exp
  | fun_dec
  | type_dec
  | "module" "{" module_level_dec ... "}"
  | stms exp
  | num_lit
  | bool_lit
  | qualified_id

num_lit ::= digits
bool_lit ::= "True" | "False"

arg_exps ::= exp {"," exp}+

module_exp ::=
  | id_or_qualified_id
  | "module" "{" exps "}"

fun_dec ::=
  | "fun" instance_ty? id "(" ty_list ")" ":" ty ";" fun_defs

fun_defs ::= fun_def { ";" fun_def ... }

fun_def ::=
  | instance_pat? id "(" pat_exps ")" ":=" "{" exps "}"

type_dec ::=
  | "type" id "=" type_def

type_def ::=
  | adt_def
  | struct_def
  | ty

adt_def ::= adt_alternative ...

adt_alternative ::= "|" id [ ty ... ]

struct_def ::= "struct" "{" field_dec ... "}"

field_dec ::= id ty ";"

interface_dec ::= ...

imp_dec ::= ...

instance_pat ::=
  | "(" pat_exp ")" "."

pat_exps ::=
  | pat_exp
  | pat_exps "," pat_exp
  | {- empty -}

//For starters, restrict this to the simplest
//case (identifier binding)
pat_exp ::=
  | id

ty ::=
  | Ty "[" "]"
  | "Int"
  | "Bool"
  | "Unit"
  | "fun" "(" TyList ")" ":" Ty
  | "module" "{" "}"
  | "interface" "{" "}"
  | qualified_id

ty_list ::=
  | ty
  | ty_list "," ty
  | {- empty -}

id_or_qualified_id ::=
  | id_or_qualified_id "." id
  | id
